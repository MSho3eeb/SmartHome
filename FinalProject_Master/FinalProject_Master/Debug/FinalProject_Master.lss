
FinalProject_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005e  00800060  000008ca  0000093e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a4a  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c13  00000000  00000000  000025b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000bb6  00000000  00000000  000031c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  00003d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008e5  00000000  00000000  00004048  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e7e  00000000  00000000  0000492d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  000057ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3b       	cpi	r26, 0xBE	; 190
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  7a:	0c 94 63 04 	jmp	0x8c6	; 0x8c6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_Init>:
void ADC_Init(void){
	/*ADMUX = (1<<REFS0) | (1<<REFS1) ;
	ADCSRA = (1<<ADEN) | (1<<ADATE) | (1<<ADPS0) | (1<<ADPS1) | (1<<ADPS2) | (1<<ADIE); 
	*/
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  82:	80 e4       	ldi	r24, 0x40	; 64
  84:	87 b9       	out	0x07, r24	; 7

	// ADC Enable and prescaler of 128
	
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	86 b9       	out	0x06, r24	; 6
  8a:	08 95       	ret

0000008c <DIO_Write>:
		break;
		case DIO_PortD:
		if(Level == STD_High){
			Toggle_Bit(PortD_Reg, channelpos);
			}else{
			Clear_Bit(PortD_Reg,channelpos);
  8c:	98 2f       	mov	r25, r24
  8e:	97 70       	andi	r25, 0x07	; 7
  90:	86 95       	lsr	r24
  92:	86 95       	lsr	r24
  94:	86 95       	lsr	r24
  96:	81 30       	cpi	r24, 0x01	; 1
  98:	21 f1       	breq	.+72     	; 0xe2 <DIO_Write+0x56>
  9a:	30 f0       	brcs	.+12     	; 0xa8 <DIO_Write+0x1c>
  9c:	82 30       	cpi	r24, 0x02	; 2
  9e:	f1 f1       	breq	.+124    	; 0x11c <DIO_Write+0x90>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_Write+0x1a>
  a4:	58 c0       	rjmp	.+176    	; 0x156 <DIO_Write+0xca>
  a6:	08 95       	ret
  a8:	61 30       	cpi	r22, 0x01	; 1
  aa:	69 f4       	brne	.+26     	; 0xc6 <DIO_Write+0x3a>
  ac:	4b b3       	in	r20, 0x1b	; 27
  ae:	21 e0       	ldi	r18, 0x01	; 1
  b0:	30 e0       	ldi	r19, 0x00	; 0
  b2:	b9 01       	movw	r22, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_Write+0x2e>
  b6:	66 0f       	add	r22, r22
  b8:	77 1f       	adc	r23, r23
  ba:	9a 95       	dec	r25
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_Write+0x2a>
  be:	cb 01       	movw	r24, r22
  c0:	84 2b       	or	r24, r20
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	08 95       	ret
  c6:	4b b3       	in	r20, 0x1b	; 27
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_Write+0x48>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_Write+0x44>
  d8:	cb 01       	movw	r24, r22
  da:	80 95       	com	r24
  dc:	84 23       	and	r24, r20
  de:	8b bb       	out	0x1b, r24	; 27
  e0:	08 95       	ret
  e2:	61 30       	cpi	r22, 0x01	; 1
  e4:	69 f4       	brne	.+26     	; 0x100 <DIO_Write+0x74>
  e6:	48 b3       	in	r20, 0x18	; 24
  e8:	21 e0       	ldi	r18, 0x01	; 1
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	b9 01       	movw	r22, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <DIO_Write+0x68>
  f0:	66 0f       	add	r22, r22
  f2:	77 1f       	adc	r23, r23
  f4:	9a 95       	dec	r25
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <DIO_Write+0x64>
  f8:	cb 01       	movw	r24, r22
  fa:	84 2b       	or	r24, r20
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	08 95       	ret
 100:	48 b3       	in	r20, 0x18	; 24
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_Write+0x82>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	9a 95       	dec	r25
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_Write+0x7e>
 112:	cb 01       	movw	r24, r22
 114:	80 95       	com	r24
 116:	84 23       	and	r24, r20
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	69 f4       	brne	.+26     	; 0x13a <DIO_Write+0xae>
 120:	45 b3       	in	r20, 0x15	; 21
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_Write+0xa2>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_Write+0x9e>
 132:	cb 01       	movw	r24, r22
 134:	84 2b       	or	r24, r20
 136:	85 bb       	out	0x15, r24	; 21
 138:	08 95       	ret
 13a:	45 b3       	in	r20, 0x15	; 21
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_Write+0xbc>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	9a 95       	dec	r25
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_Write+0xb8>
 14c:	cb 01       	movw	r24, r22
 14e:	80 95       	com	r24
 150:	84 23       	and	r24, r20
 152:	85 bb       	out	0x15, r24	; 21
 154:	08 95       	ret
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	69 f4       	brne	.+26     	; 0x174 <DIO_Write+0xe8>
 15a:	42 b3       	in	r20, 0x12	; 18
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	b9 01       	movw	r22, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_Write+0xdc>
 164:	66 0f       	add	r22, r22
 166:	77 1f       	adc	r23, r23
 168:	9a 95       	dec	r25
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_Write+0xd8>
 16c:	cb 01       	movw	r24, r22
 16e:	84 2b       	or	r24, r20
 170:	82 bb       	out	0x12, r24	; 18
 172:	08 95       	ret
 174:	42 b3       	in	r20, 0x12	; 18
 176:	21 e0       	ldi	r18, 0x01	; 1
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	b9 01       	movw	r22, r18
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_Write+0xf6>
 17e:	66 0f       	add	r22, r22
 180:	77 1f       	adc	r23, r23
 182:	9a 95       	dec	r25
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_Write+0xf2>
 186:	cb 01       	movw	r24, r22
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	82 bb       	out	0x12, r24	; 18
 18e:	08 95       	ret

00000190 <DIO_WritePort>:
		break;
		
	}
}

void DIO_WritePort (DIO_PortTypes Portx, uint8 data){
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	1f 92       	push	r1
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	69 83       	std	Y+1, r22	; 0x01
	switch(Portx){
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	49 f0       	breq	.+18     	; 0x1b2 <DIO_WritePort+0x22>
 1a0:	28 f0       	brcs	.+10     	; 0x1ac <DIO_WritePort+0x1c>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	49 f0       	breq	.+18     	; 0x1b8 <DIO_WritePort+0x28>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	51 f0       	breq	.+20     	; 0x1be <DIO_WritePort+0x2e>
 1aa:	0b c0       	rjmp	.+22     	; 0x1c2 <DIO_WritePort+0x32>
		case DIO_PortA:
			PortA_Reg = data;
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	8b bb       	out	0x1b, r24	; 27
		break;
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <DIO_WritePort+0x32>
		case DIO_PortB:
			PortB_Reg = data;
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	88 bb       	out	0x18, r24	; 24
		break;
 1b6:	05 c0       	rjmp	.+10     	; 0x1c2 <DIO_WritePort+0x32>
		case DIO_PortC:
			PortC_Reg = data;
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	85 bb       	out	0x15, r24	; 21
		break;
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WritePort+0x32>
		case DIO_PortD:
			PortD_Reg = data;
 1be:	89 81       	ldd	r24, Y+1	; 0x01
 1c0:	82 bb       	out	0x12, r24	; 18
		break;
	}
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <DIO_InIt>:
};




void DIO_InIt(void){
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	1f 92       	push	r1
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
	DIO_PortTypes portx;
	DIO_ChannelTypes channelpos;
	uint8 count = 0;
 1d4:	19 82       	std	Y+1, r1	; 0x01
	
	for(count = DIO_ChannelA0; count<PinCount ;count++){
 1d6:	19 82       	std	Y+1, r1	; 0x01
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	80 32       	cpi	r24, 0x20	; 32
 1dc:	08 f0       	brcs	.+2      	; 0x1e0 <DIO_InIt+0x16>
 1de:	98 c0       	rjmp	.+304    	; 0x310 <DIO_InIt+0x146>
		switch(portx){
			case DIO_PortA:
			if(pinCFG[count].PinDir == Output){
				Set_Bit(DDRA_Reg, channelpos);
				}else{
				Clear_Bit(DDRA_Reg,channelpos);
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
	DIO_PortTypes portx;
	DIO_ChannelTypes channelpos;
	uint8 count = 0;
	
	for(count = DIO_ChannelA0; count<PinCount ;count++){
		portx = count/8;
 1e4:	89 81       	ldd	r24, Y+1	; 0x01
		channelpos = count % 8;
 1e6:	99 81       	ldd	r25, Y+1	; 0x01
 1e8:	97 70       	andi	r25, 0x07	; 7
		switch(portx){
 1ea:	86 95       	lsr	r24
 1ec:	86 95       	lsr	r24
 1ee:	86 95       	lsr	r24
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	41 f1       	breq	.+80     	; 0x244 <DIO_InIt+0x7a>
 1f4:	38 f0       	brcs	.+14     	; 0x204 <DIO_InIt+0x3a>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	09 f4       	brne	.+2      	; 0x1fc <DIO_InIt+0x32>
 1fa:	44 c0       	rjmp	.+136    	; 0x284 <DIO_InIt+0xba>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	09 f4       	brne	.+2      	; 0x202 <DIO_InIt+0x38>
 200:	61 c0       	rjmp	.+194    	; 0x2c4 <DIO_InIt+0xfa>
 202:	7f c0       	rjmp	.+254    	; 0x302 <DIO_InIt+0x138>
			case DIO_PortA:
			if(pinCFG[count].PinDir == Output){
 204:	e9 81       	ldd	r30, Y+1	; 0x01
 206:	f0 e0       	ldi	r31, 0x00	; 0
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	e0 5a       	subi	r30, 0xA0	; 160
 20e:	ff 4f       	sbci	r31, 0xFF	; 255
 210:	80 81       	ld	r24, Z
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_InIt+0x62>
				Set_Bit(DDRA_Reg, channelpos);
 216:	4a b3       	in	r20, 0x1a	; 26
 218:	b9 01       	movw	r22, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_InIt+0x56>
 21c:	66 0f       	add	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	9a 95       	dec	r25
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_InIt+0x52>
 224:	cb 01       	movw	r24, r22
 226:	84 2b       	or	r24, r20
 228:	8a bb       	out	0x1a, r24	; 26
 22a:	6b c0       	rjmp	.+214    	; 0x302 <DIO_InIt+0x138>
				}else{
				Clear_Bit(DDRA_Reg,channelpos);
 22c:	4a b3       	in	r20, 0x1a	; 26
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_InIt+0x6c>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	9a 95       	dec	r25
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_InIt+0x68>
 23a:	cb 01       	movw	r24, r22
 23c:	80 95       	com	r24
 23e:	84 23       	and	r24, r20
 240:	8a bb       	out	0x1a, r24	; 26
 242:	5f c0       	rjmp	.+190    	; 0x302 <DIO_InIt+0x138>
			}
			break;
			case DIO_PortB:
			if(pinCFG[count].PinDir == Output){
 244:	e9 81       	ldd	r30, Y+1	; 0x01
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	e0 5a       	subi	r30, 0xA0	; 160
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	80 81       	ld	r24, Z
 252:	81 30       	cpi	r24, 0x01	; 1
 254:	59 f4       	brne	.+22     	; 0x26c <DIO_InIt+0xa2>
				Set_Bit(DDRB_Reg, channelpos);
 256:	47 b3       	in	r20, 0x17	; 23
 258:	b9 01       	movw	r22, r18
 25a:	02 c0       	rjmp	.+4      	; 0x260 <DIO_InIt+0x96>
 25c:	66 0f       	add	r22, r22
 25e:	77 1f       	adc	r23, r23
 260:	9a 95       	dec	r25
 262:	e2 f7       	brpl	.-8      	; 0x25c <DIO_InIt+0x92>
 264:	cb 01       	movw	r24, r22
 266:	84 2b       	or	r24, r20
 268:	87 bb       	out	0x17, r24	; 23
 26a:	4b c0       	rjmp	.+150    	; 0x302 <DIO_InIt+0x138>
				}else{
				Clear_Bit(DDRB_Reg,channelpos);
 26c:	47 b3       	in	r20, 0x17	; 23
 26e:	b9 01       	movw	r22, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_InIt+0xac>
 272:	66 0f       	add	r22, r22
 274:	77 1f       	adc	r23, r23
 276:	9a 95       	dec	r25
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_InIt+0xa8>
 27a:	cb 01       	movw	r24, r22
 27c:	80 95       	com	r24
 27e:	84 23       	and	r24, r20
 280:	87 bb       	out	0x17, r24	; 23
 282:	3f c0       	rjmp	.+126    	; 0x302 <DIO_InIt+0x138>
			}
			break;
			case DIO_PortC:
			if(pinCFG[count].PinDir == Output){
 284:	e9 81       	ldd	r30, Y+1	; 0x01
 286:	f0 e0       	ldi	r31, 0x00	; 0
 288:	ee 0f       	add	r30, r30
 28a:	ff 1f       	adc	r31, r31
 28c:	e0 5a       	subi	r30, 0xA0	; 160
 28e:	ff 4f       	sbci	r31, 0xFF	; 255
 290:	80 81       	ld	r24, Z
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	59 f4       	brne	.+22     	; 0x2ac <DIO_InIt+0xe2>
				Set_Bit(DDRC_Reg, channelpos);
 296:	44 b3       	in	r20, 0x14	; 20
 298:	b9 01       	movw	r22, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_InIt+0xd6>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	9a 95       	dec	r25
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_InIt+0xd2>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 2b       	or	r24, r20
 2a8:	84 bb       	out	0x14, r24	; 20
 2aa:	2b c0       	rjmp	.+86     	; 0x302 <DIO_InIt+0x138>
				}else{
				Clear_Bit(DDRC_Reg,channelpos);
 2ac:	44 b3       	in	r20, 0x14	; 20
 2ae:	b9 01       	movw	r22, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_InIt+0xec>
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	9a 95       	dec	r25
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_InIt+0xe8>
 2ba:	cb 01       	movw	r24, r22
 2bc:	80 95       	com	r24
 2be:	84 23       	and	r24, r20
 2c0:	84 bb       	out	0x14, r24	; 20
 2c2:	1f c0       	rjmp	.+62     	; 0x302 <DIO_InIt+0x138>
			}
			break;
			case DIO_PortD:
			if(pinCFG[count].PinDir == Output){
 2c4:	e9 81       	ldd	r30, Y+1	; 0x01
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ee 0f       	add	r30, r30
 2ca:	ff 1f       	adc	r31, r31
 2cc:	e0 5a       	subi	r30, 0xA0	; 160
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
 2d0:	80 81       	ld	r24, Z
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	59 f4       	brne	.+22     	; 0x2ec <DIO_InIt+0x122>
				Set_Bit(DDRD_Reg, channelpos);
 2d6:	41 b3       	in	r20, 0x11	; 17
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_InIt+0x116>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	9a 95       	dec	r25
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_InIt+0x112>
 2e4:	cb 01       	movw	r24, r22
 2e6:	84 2b       	or	r24, r20
 2e8:	81 bb       	out	0x11, r24	; 17
 2ea:	0b c0       	rjmp	.+22     	; 0x302 <DIO_InIt+0x138>
				}else{
				Clear_Bit(DDRD_Reg,channelpos);
 2ec:	41 b3       	in	r20, 0x11	; 17
 2ee:	b9 01       	movw	r22, r18
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_InIt+0x12c>
 2f2:	66 0f       	add	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	9a 95       	dec	r25
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_InIt+0x128>
 2fa:	cb 01       	movw	r24, r22
 2fc:	80 95       	com	r24
 2fe:	84 23       	and	r24, r20
 300:	81 bb       	out	0x11, r24	; 17
void DIO_InIt(void){
	DIO_PortTypes portx;
	DIO_ChannelTypes channelpos;
	uint8 count = 0;
	
	for(count = DIO_ChannelA0; count<PinCount ;count++){
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	80 32       	cpi	r24, 0x20	; 32
 30c:	08 f4       	brcc	.+2      	; 0x310 <DIO_InIt+0x146>
 30e:	6a cf       	rjmp	.-300    	; 0x1e4 <DIO_InIt+0x1a>
			}
			break;
			
		}
	}
 310:	0f 90       	pop	r0
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <LCD_Cmd>:
 *  Author: Mohamed Teleb
 */ 

#include "LCD.h"

void LCD_Cmd(uint8 cmd){
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	00 d0       	rcall	.+0      	; 0x31e <LCD_Cmd+0x6>
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Send_Cmd;
	Send_Cmd = (LCD_Data_Port & (0x0F)) | (cmd & (0xF0));
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	80 7f       	andi	r24, 0xF0	; 240
 328:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePort(LCD_Data_Port, Send_Cmd);
 32a:	69 81       	ldd	r22, Y+1	; 0x01
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_WritePort>
	DIO_Write(LCD_RS,STD_Low);
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	89 e0       	ldi	r24, 0x09	; 9
 336:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	8b e0       	ldi	r24, 0x0B	; 11
 33e:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 342:	8f e3       	ldi	r24, 0x3F	; 63
 344:	9f e1       	ldi	r25, 0x1F	; 31
 346:	01 97       	sbiw	r24, 0x01	; 1
 348:	f1 f7       	brne	.-4      	; 0x346 <LCD_Cmd+0x2e>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_Cmd+0x34>
 34c:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	8b e0       	ldi	r24, 0x0B	; 11
 352:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 356:	8f e3       	ldi	r24, 0x3F	; 63
 358:	9f e1       	ldi	r25, 0x1F	; 31
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <LCD_Cmd+0x42>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <LCD_Cmd+0x48>
 360:	00 00       	nop
	_delay_ms(2);
	Send_Cmd = (LCD_Data_Port & (0x0F)) | (cmd << (4));
 362:	8a 81       	ldd	r24, Y+2	; 0x02
 364:	82 95       	swap	r24
 366:	80 7f       	andi	r24, 0xF0	; 240
 368:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePort(LCD_Data_Port, Send_Cmd);
 36a:	69 81       	ldd	r22, Y+1	; 0x01
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_WritePort>
	DIO_Write(LCD_RS,STD_Low);
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	89 e0       	ldi	r24, 0x09	; 9
 376:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	8b e0       	ldi	r24, 0x0B	; 11
 37e:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 382:	8f e3       	ldi	r24, 0x3F	; 63
 384:	9f e1       	ldi	r25, 0x1F	; 31
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <LCD_Cmd+0x6e>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <LCD_Cmd+0x74>
 38c:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	8b e0       	ldi	r24, 0x0B	; 11
 392:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 396:	8f e3       	ldi	r24, 0x3F	; 63
 398:	9f e1       	ldi	r25, 0x1F	; 31
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_Cmd+0x82>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCD_Cmd+0x88>
 3a0:	00 00       	nop
	_delay_ms(2);
	
}
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	df 91       	pop	r29
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <LCD_Clear>:
void LCD_Clear(void){
	LCD_Cmd(0x01);
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Cmd>
 3b2:	08 95       	ret

000003b4 <LCD_Init>:
}

void LCD_Init(void){
	DIO_Write(LCD_RW,STD_Low);
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	8a e0       	ldi	r24, 0x0A	; 10
 3b8:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	89 ef       	ldi	r24, 0xF9	; 249
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <LCD_Init+0xe>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <LCD_Init+0x18>
 3cc:	00 00       	nop
	_delay_ms(20);
	LCD_Cmd(0x33);
 3ce:	83 e3       	ldi	r24, 0x33	; 51
 3d0:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Cmd>
 3d4:	8f e3       	ldi	r24, 0x3F	; 63
 3d6:	9f e1       	ldi	r25, 0x1F	; 31
 3d8:	01 97       	sbiw	r24, 0x01	; 1
 3da:	f1 f7       	brne	.-4      	; 0x3d8 <LCD_Init+0x24>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <LCD_Init+0x2a>
 3de:	00 00       	nop
	_delay_ms(2);
	LCD_Cmd(0x32);
 3e0:	82 e3       	ldi	r24, 0x32	; 50
 3e2:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Cmd>
	LCD_Cmd(0x28);
 3e6:	88 e2       	ldi	r24, 0x28	; 40
 3e8:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Cmd>
	LCD_Cmd(0x06);
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Cmd>
	LCD_Cmd(0x0C);
 3f2:	8c e0       	ldi	r24, 0x0C	; 12
 3f4:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Cmd>
	LCD_Cmd(0x01);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_Cmd>
 3fe:	8f e3       	ldi	r24, 0x3F	; 63
 400:	9f e1       	ldi	r25, 0x1F	; 31
 402:	01 97       	sbiw	r24, 0x01	; 1
 404:	f1 f7       	brne	.-4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 406:	00 c0       	rjmp	.+0      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 408:	00 00       	nop
 40a:	08 95       	ret

0000040c <LCD_Char>:
	_delay_ms(2);
	
}
void LCD_Char(uint8 data){
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <LCD_Char+0x6>
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
 416:	8a 83       	std	Y+2, r24	; 0x02
	uint8 Send_Data;
	Send_Data = (LCD_Data_Port & (0x0F)) | (data & (0xF0));
 418:	8a 81       	ldd	r24, Y+2	; 0x02
 41a:	80 7f       	andi	r24, 0xF0	; 240
 41c:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePort(LCD_Data_Port, Send_Data);
 41e:	69 81       	ldd	r22, Y+1	; 0x01
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_WritePort>
	DIO_Write(LCD_RS,STD_High);
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	89 e0       	ldi	r24, 0x09	; 9
 42a:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 42e:	60 e0       	ldi	r22, 0x00	; 0
 430:	8b e0       	ldi	r24, 0x0B	; 11
 432:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 436:	8f e3       	ldi	r24, 0x3F	; 63
 438:	9f e1       	ldi	r25, 0x1F	; 31
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <LCD_Char+0x2e>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <LCD_Char+0x34>
 440:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 442:	61 e0       	ldi	r22, 0x01	; 1
 444:	8b e0       	ldi	r24, 0x0B	; 11
 446:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 44a:	8f e3       	ldi	r24, 0x3F	; 63
 44c:	9f e1       	ldi	r25, 0x1F	; 31
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <LCD_Char+0x42>
 452:	00 c0       	rjmp	.+0      	; 0x454 <LCD_Char+0x48>
 454:	00 00       	nop
	_delay_ms(2);
	
	Send_Data = (LCD_Data_Port & (0x0F)) | (data << (4));
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	82 95       	swap	r24
 45a:	80 7f       	andi	r24, 0xF0	; 240
 45c:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePort(LCD_Data_Port, Send_Data);
 45e:	69 81       	ldd	r22, Y+1	; 0x01
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	0e 94 c8 00 	call	0x190	; 0x190 <DIO_WritePort>
	DIO_Write(LCD_RS,STD_High);
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	89 e0       	ldi	r24, 0x09	; 9
 46a:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
	DIO_Write(LCD_E,STD_Low);
 46e:	60 e0       	ldi	r22, 0x00	; 0
 470:	8b e0       	ldi	r24, 0x0B	; 11
 472:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 476:	8f e3       	ldi	r24, 0x3F	; 63
 478:	9f e1       	ldi	r25, 0x1F	; 31
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <LCD_Char+0x6e>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <LCD_Char+0x74>
 480:	00 00       	nop
	_delay_ms(2);
	DIO_Write(LCD_E,STD_High);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	8b e0       	ldi	r24, 0x0B	; 11
 486:	0e 94 46 00 	call	0x8c	; 0x8c <DIO_Write>
 48a:	8f e3       	ldi	r24, 0x3F	; 63
 48c:	9f e1       	ldi	r25, 0x1F	; 31
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	f1 f7       	brne	.-4      	; 0x48e <LCD_Char+0x82>
 492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_Char+0x88>
 494:	00 00       	nop
	_delay_ms(2);
}
 496:	0f 90       	pop	r0
 498:	0f 90       	pop	r0
 49a:	df 91       	pop	r29
 49c:	cf 91       	pop	r28
 49e:	08 95       	ret

000004a0 <LCD_String>:

void LCD_String(uint8 string[]){
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
	uint8* data =(uint8*) string;
	int i = 0;
	while(data[i] != '\0'){
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 81       	ld	r18, Z
 4a8:	22 23       	and	r18, r18
 4aa:	39 f0       	breq	.+14     	; 0x4ba <LCD_String+0x1a>
 4ac:	ec 01       	movw	r28, r24
		LCD_Char(data[i]);
 4ae:	89 91       	ld	r24, Y+
 4b0:	0e 94 06 02 	call	0x40c	; 0x40c <LCD_Char>
}

void LCD_String(uint8 string[]){
	uint8* data =(uint8*) string;
	int i = 0;
	while(data[i] != '\0'){
 4b4:	88 81       	ld	r24, Y
 4b6:	81 11       	cpse	r24, r1
 4b8:	fa cf       	rjmp	.-12     	; 0x4ae <LCD_String+0xe>
		LCD_Char(data[i]);
		i++;
	}
}
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <main>:
#include <avr/interrupt.h>
#include <stdlib.h>


int main(void)
{
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	2f 97       	sbiw	r28, 0x0f	; 15
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
	
	UART_Init();
 4d4:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <UART_Init>
	DIO_InIt();
 4d8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_InIt>
	LCD_Init();
 4dc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCD_Init>
	ADC_Init();
 4e0:	0e 94 41 00 	call	0x82	; 0x82 <ADC_Init>
	

	SPI_CFG config = {MASTER,OSC16};
 4e4:	19 82       	std	Y+1, r1	; 0x01
 4e6:	80 e1       	ldi	r24, 0x10	; 16
 4e8:	8a 83       	std	Y+2, r24	; 0x02
	SPI_Init(&config);
 4ea:	ce 01       	movw	r24, r28
 4ec:	01 96       	adiw	r24, 0x01	; 1
 4ee:	0e 94 bd 02 	call	0x57a	; 0x57a <SPI_Init>
	Slave_En();
 4f2:	c4 98       	cbi	0x18, 4	; 24
	
	uint8 Command;
	char buffer[10];
	uint8 temp = 0;
 4f4:	1e 86       	std	Y+14, r1	; 0x0e
	
	
	
	while (1)
	{
		adc_result = SPDR;
 4f6:	8f b1       	in	r24, 0x0f	; 15
 4f8:	8f 87       	std	Y+15, r24	; 0x0f
		//adc_result = ADC_Read(0);
		//temp = adc_result / 2.01;
		Command = UART_Recive();
 4fa:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <UART_Recive>
 4fe:	8b 83       	std	Y+3, r24	; 0x03
		if(Command == 'r'){
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	82 37       	cpi	r24, 0x72	; 114
 504:	b1 f5       	brne	.+108    	; 0x572 <main+0xb2>
		if(SPI_SEND_GET('r') != 0x80){
 506:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <SPI_SEND_GET>
 50a:	80 38       	cpi	r24, 0x80	; 128
 50c:	a1 f3       	breq	.-24     	; 0x4f6 <main+0x36>
		adc_result = SPDR;
 50e:	8f b1       	in	r24, 0x0f	; 15
 510:	8f 87       	std	Y+15, r24	; 0x0f
		if(adc_result != 0x00){
 512:	8f 85       	ldd	r24, Y+15	; 0x0f
 514:	88 23       	and	r24, r24
 516:	31 f1       	breq	.+76     	; 0x564 <main+0xa4>
			temp =  adc_result / 2.01;
 518:	6f 85       	ldd	r22, Y+15	; 0x0f
 51a:	70 e0       	ldi	r23, 0x00	; 0
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 a2 03 	call	0x744	; 0x744 <__floatsisf>
 524:	27 ed       	ldi	r18, 0xD7	; 215
 526:	33 ea       	ldi	r19, 0xA3	; 163
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	50 e4       	ldi	r21, 0x40	; 64
 52c:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__divsf3>
 530:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__fixunssfsi>
 534:	6e 87       	std	Y+14, r22	; 0x0e
			itoa(temp,buffer,10);
 536:	8e 85       	ldd	r24, Y+14	; 0x0e
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 538:	4a e0       	ldi	r20, 0x0A	; 10
 53a:	be 01       	movw	r22, r28
 53c:	6c 5f       	subi	r22, 0xFC	; 252
 53e:	7f 4f       	sbci	r23, 0xFF	; 255
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 2e 04 	call	0x85c	; 0x85c <__itoa_ncheck>
			LCD_Clear();
 546:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_Clear>
			LCD_String((uint8*)" TEMP = ");
 54a:	80 ea       	ldi	r24, 0xA0	; 160
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_String>
			LCD_String((uint8*)buffer);
 552:	ce 01       	movw	r24, r28
 554:	04 96       	adiw	r24, 0x04	; 4
 556:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_String>
			LCD_String((uint8*)" C");
 55a:	89 ea       	ldi	r24, 0xA9	; 169
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_String>
 562:	c9 cf       	rjmp	.-110    	; 0x4f6 <main+0x36>
		}else{
			LCD_Clear();
 564:	0e 94 d6 01 	call	0x3ac	; 0x3ac <LCD_Clear>
			LCD_String((uint8*)" PRESS AGAIN PLZ!");
 568:	8c ea       	ldi	r24, 0xAC	; 172
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	0e 94 50 02 	call	0x4a0	; 0x4a0 <LCD_String>
 570:	c2 cf       	rjmp	.-124    	; 0x4f6 <main+0x36>
		}
		
		}
		}else{
		SPI_Send(Command);
 572:	8b 81       	ldd	r24, Y+3	; 0x03
 574:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_Send>
 578:	be cf       	rjmp	.-132    	; 0x4f6 <main+0x36>

0000057a <SPI_Init>:
	uint8 i = 0;
	while(data[i] != '\0'){
		SPI_Send(data[i]);
		i++;
	}
}
 57a:	fc 01       	movw	r30, r24
 57c:	20 81       	ld	r18, Z
 57e:	22 23       	and	r18, r18
 580:	19 f0       	breq	.+6      	; 0x588 <SPI_Init+0xe>
 582:	21 30       	cpi	r18, 0x01	; 1
 584:	41 f0       	breq	.+16     	; 0x596 <SPI_Init+0x1c>
 586:	0b c0       	rjmp	.+22     	; 0x59e <SPI_Init+0x24>
 588:	bc 9a       	sbi	0x17, 4	; 23
 58a:	bd 9a       	sbi	0x17, 5	; 23
 58c:	bf 9a       	sbi	0x17, 7	; 23
 58e:	be 98       	cbi	0x17, 6	; 23
 590:	c4 9a       	sbi	0x18, 4	; 24
 592:	6c 9a       	sbi	0x0d, 4	; 13
 594:	04 c0       	rjmp	.+8      	; 0x59e <SPI_Init+0x24>
 596:	bc 98       	cbi	0x17, 4	; 23
 598:	bd 98       	cbi	0x17, 5	; 23
 59a:	bf 98       	cbi	0x17, 7	; 23
 59c:	be 9a       	sbi	0x17, 6	; 23
 59e:	fc 01       	movw	r30, r24
 5a0:	81 81       	ldd	r24, Z+1	; 0x01
 5a2:	80 31       	cpi	r24, 0x10	; 16
 5a4:	09 f4       	brne	.+2      	; 0x5a8 <SPI_Init+0x2e>
 5a6:	68 9a       	sbi	0x0d, 0	; 13
 5a8:	6e 9a       	sbi	0x0d, 6	; 13
 5aa:	08 95       	ret

000005ac <SPI_Send>:
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	1f 92       	push	r1
 5b2:	cd b7       	in	r28, 0x3d	; 61
 5b4:	de b7       	in	r29, 0x3e	; 62
 5b6:	89 83       	std	Y+1, r24	; 0x01
 5b8:	89 81       	ldd	r24, Y+1	; 0x01
 5ba:	8f b9       	out	0x0f, r24	; 15
 5bc:	77 9b       	sbis	0x0e, 7	; 14
 5be:	fe cf       	rjmp	.-4      	; 0x5bc <SPI_Send+0x10>
 5c0:	0f 90       	pop	r0
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	08 95       	ret

000005c8 <SPI_SEND_GET>:

uint8 SPI_SEND_GET(uint8 data){
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	1f 92       	push	r1
 5ce:	cd b7       	in	r28, 0x3d	; 61
 5d0:	de b7       	in	r29, 0x3e	; 62
 5d2:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
 5d8:	77 9b       	sbis	0x0e, 7	; 14
 5da:	fe cf       	rjmp	.-4      	; 0x5d8 <SPI_SEND_GET+0x10>
	return SPDR;
 5dc:	8f b1       	in	r24, 0x0f	; 15
 5de:	0f 90       	pop	r0
 5e0:	df 91       	pop	r29
 5e2:	cf 91       	pop	r28
 5e4:	08 95       	ret

000005e6 <UART_Init>:
	volatile unsigned char i = 0;
	while(data[i] != '\0'){
		UART_SendChar(data[i]);
		i++;
	}
}
 5e6:	88 e1       	ldi	r24, 0x18	; 24
 5e8:	8a b9       	out	0x0a, r24	; 10
 5ea:	86 e8       	ldi	r24, 0x86	; 134
 5ec:	80 bd       	out	0x20, r24	; 32
 5ee:	87 e6       	ldi	r24, 0x67	; 103
 5f0:	89 b9       	out	0x09, r24	; 9
 5f2:	10 bc       	out	0x20, r1	; 32
 5f4:	08 95       	ret

000005f6 <UART_Recive>:

char UART_Recive(){
	while(!(UCSRA & (1<<RXC)));
 5f6:	5f 9b       	sbis	0x0b, 7	; 11
 5f8:	fe cf       	rjmp	.-4      	; 0x5f6 <UART_Recive>
	return UDR;
 5fa:	8c b1       	in	r24, 0x0c	; 12
 5fc:	08 95       	ret

000005fe <__divsf3>:
 5fe:	0e 94 13 03 	call	0x626	; 0x626 <__divsf3x>
 602:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <__fp_round>
 606:	0e 94 ed 03 	call	0x7da	; 0x7da <__fp_pscB>
 60a:	58 f0       	brcs	.+22     	; 0x622 <__divsf3+0x24>
 60c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_pscA>
 610:	40 f0       	brcs	.+16     	; 0x622 <__divsf3+0x24>
 612:	29 f4       	brne	.+10     	; 0x61e <__divsf3+0x20>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	29 f0       	breq	.+10     	; 0x622 <__divsf3+0x24>
 618:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_inf>
 61c:	51 11       	cpse	r21, r1
 61e:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_szero>
 622:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__fp_nan>

00000626 <__divsf3x>:
 626:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_split3>
 62a:	68 f3       	brcs	.-38     	; 0x606 <__divsf3+0x8>

0000062c <__divsf3_pse>:
 62c:	99 23       	and	r25, r25
 62e:	b1 f3       	breq	.-20     	; 0x61c <__divsf3+0x1e>
 630:	55 23       	and	r21, r21
 632:	91 f3       	breq	.-28     	; 0x618 <__divsf3+0x1a>
 634:	95 1b       	sub	r25, r21
 636:	55 0b       	sbc	r21, r21
 638:	bb 27       	eor	r27, r27
 63a:	aa 27       	eor	r26, r26
 63c:	62 17       	cp	r22, r18
 63e:	73 07       	cpc	r23, r19
 640:	84 07       	cpc	r24, r20
 642:	38 f0       	brcs	.+14     	; 0x652 <__divsf3_pse+0x26>
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	22 0f       	add	r18, r18
 64a:	33 1f       	adc	r19, r19
 64c:	44 1f       	adc	r20, r20
 64e:	aa 1f       	adc	r26, r26
 650:	a9 f3       	breq	.-22     	; 0x63c <__divsf3_pse+0x10>
 652:	35 d0       	rcall	.+106    	; 0x6be <__divsf3_pse+0x92>
 654:	0e 2e       	mov	r0, r30
 656:	3a f0       	brmi	.+14     	; 0x666 <__divsf3_pse+0x3a>
 658:	e0 e8       	ldi	r30, 0x80	; 128
 65a:	32 d0       	rcall	.+100    	; 0x6c0 <__divsf3_pse+0x94>
 65c:	91 50       	subi	r25, 0x01	; 1
 65e:	50 40       	sbci	r21, 0x00	; 0
 660:	e6 95       	lsr	r30
 662:	00 1c       	adc	r0, r0
 664:	ca f7       	brpl	.-14     	; 0x658 <__divsf3_pse+0x2c>
 666:	2b d0       	rcall	.+86     	; 0x6be <__divsf3_pse+0x92>
 668:	fe 2f       	mov	r31, r30
 66a:	29 d0       	rcall	.+82     	; 0x6be <__divsf3_pse+0x92>
 66c:	66 0f       	add	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	bb 1f       	adc	r27, r27
 674:	26 17       	cp	r18, r22
 676:	37 07       	cpc	r19, r23
 678:	48 07       	cpc	r20, r24
 67a:	ab 07       	cpc	r26, r27
 67c:	b0 e8       	ldi	r27, 0x80	; 128
 67e:	09 f0       	breq	.+2      	; 0x682 <__divsf3_pse+0x56>
 680:	bb 0b       	sbc	r27, r27
 682:	80 2d       	mov	r24, r0
 684:	bf 01       	movw	r22, r30
 686:	ff 27       	eor	r31, r31
 688:	93 58       	subi	r25, 0x83	; 131
 68a:	5f 4f       	sbci	r21, 0xFF	; 255
 68c:	3a f0       	brmi	.+14     	; 0x69c <__divsf3_pse+0x70>
 68e:	9e 3f       	cpi	r25, 0xFE	; 254
 690:	51 05       	cpc	r21, r1
 692:	78 f0       	brcs	.+30     	; 0x6b2 <__divsf3_pse+0x86>
 694:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__fp_inf>
 698:	0c 94 28 04 	jmp	0x850	; 0x850 <__fp_szero>
 69c:	5f 3f       	cpi	r21, 0xFF	; 255
 69e:	e4 f3       	brlt	.-8      	; 0x698 <__divsf3_pse+0x6c>
 6a0:	98 3e       	cpi	r25, 0xE8	; 232
 6a2:	d4 f3       	brlt	.-12     	; 0x698 <__divsf3_pse+0x6c>
 6a4:	86 95       	lsr	r24
 6a6:	77 95       	ror	r23
 6a8:	67 95       	ror	r22
 6aa:	b7 95       	ror	r27
 6ac:	f7 95       	ror	r31
 6ae:	9f 5f       	subi	r25, 0xFF	; 255
 6b0:	c9 f7       	brne	.-14     	; 0x6a4 <__divsf3_pse+0x78>
 6b2:	88 0f       	add	r24, r24
 6b4:	91 1d       	adc	r25, r1
 6b6:	96 95       	lsr	r25
 6b8:	87 95       	ror	r24
 6ba:	97 f9       	bld	r25, 7
 6bc:	08 95       	ret
 6be:	e1 e0       	ldi	r30, 0x01	; 1
 6c0:	66 0f       	add	r22, r22
 6c2:	77 1f       	adc	r23, r23
 6c4:	88 1f       	adc	r24, r24
 6c6:	bb 1f       	adc	r27, r27
 6c8:	62 17       	cp	r22, r18
 6ca:	73 07       	cpc	r23, r19
 6cc:	84 07       	cpc	r24, r20
 6ce:	ba 07       	cpc	r27, r26
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__divsf3_pse+0xae>
 6d2:	62 1b       	sub	r22, r18
 6d4:	73 0b       	sbc	r23, r19
 6d6:	84 0b       	sbc	r24, r20
 6d8:	ba 0b       	sbc	r27, r26
 6da:	ee 1f       	adc	r30, r30
 6dc:	88 f7       	brcc	.-30     	; 0x6c0 <__divsf3_pse+0x94>
 6de:	e0 95       	com	r30
 6e0:	08 95       	ret

000006e2 <__fixunssfsi>:
 6e2:	0e 94 0d 04 	call	0x81a	; 0x81a <__fp_splitA>
 6e6:	88 f0       	brcs	.+34     	; 0x70a <__fixunssfsi+0x28>
 6e8:	9f 57       	subi	r25, 0x7F	; 127
 6ea:	98 f0       	brcs	.+38     	; 0x712 <__fixunssfsi+0x30>
 6ec:	b9 2f       	mov	r27, r25
 6ee:	99 27       	eor	r25, r25
 6f0:	b7 51       	subi	r27, 0x17	; 23
 6f2:	b0 f0       	brcs	.+44     	; 0x720 <__fixunssfsi+0x3e>
 6f4:	e1 f0       	breq	.+56     	; 0x72e <__fixunssfsi+0x4c>
 6f6:	66 0f       	add	r22, r22
 6f8:	77 1f       	adc	r23, r23
 6fa:	88 1f       	adc	r24, r24
 6fc:	99 1f       	adc	r25, r25
 6fe:	1a f0       	brmi	.+6      	; 0x706 <__fixunssfsi+0x24>
 700:	ba 95       	dec	r27
 702:	c9 f7       	brne	.-14     	; 0x6f6 <__fixunssfsi+0x14>
 704:	14 c0       	rjmp	.+40     	; 0x72e <__fixunssfsi+0x4c>
 706:	b1 30       	cpi	r27, 0x01	; 1
 708:	91 f0       	breq	.+36     	; 0x72e <__fixunssfsi+0x4c>
 70a:	0e 94 27 04 	call	0x84e	; 0x84e <__fp_zero>
 70e:	b1 e0       	ldi	r27, 0x01	; 1
 710:	08 95       	ret
 712:	0c 94 27 04 	jmp	0x84e	; 0x84e <__fp_zero>
 716:	67 2f       	mov	r22, r23
 718:	78 2f       	mov	r23, r24
 71a:	88 27       	eor	r24, r24
 71c:	b8 5f       	subi	r27, 0xF8	; 248
 71e:	39 f0       	breq	.+14     	; 0x72e <__fixunssfsi+0x4c>
 720:	b9 3f       	cpi	r27, 0xF9	; 249
 722:	cc f3       	brlt	.-14     	; 0x716 <__fixunssfsi+0x34>
 724:	86 95       	lsr	r24
 726:	77 95       	ror	r23
 728:	67 95       	ror	r22
 72a:	b3 95       	inc	r27
 72c:	d9 f7       	brne	.-10     	; 0x724 <__fixunssfsi+0x42>
 72e:	3e f4       	brtc	.+14     	; 0x73e <__fixunssfsi+0x5c>
 730:	90 95       	com	r25
 732:	80 95       	com	r24
 734:	70 95       	com	r23
 736:	61 95       	neg	r22
 738:	7f 4f       	sbci	r23, 0xFF	; 255
 73a:	8f 4f       	sbci	r24, 0xFF	; 255
 73c:	9f 4f       	sbci	r25, 0xFF	; 255
 73e:	08 95       	ret

00000740 <__floatunsisf>:
 740:	e8 94       	clt
 742:	09 c0       	rjmp	.+18     	; 0x756 <__floatsisf+0x12>

00000744 <__floatsisf>:
 744:	97 fb       	bst	r25, 7
 746:	3e f4       	brtc	.+14     	; 0x756 <__floatsisf+0x12>
 748:	90 95       	com	r25
 74a:	80 95       	com	r24
 74c:	70 95       	com	r23
 74e:	61 95       	neg	r22
 750:	7f 4f       	sbci	r23, 0xFF	; 255
 752:	8f 4f       	sbci	r24, 0xFF	; 255
 754:	9f 4f       	sbci	r25, 0xFF	; 255
 756:	99 23       	and	r25, r25
 758:	a9 f0       	breq	.+42     	; 0x784 <__floatsisf+0x40>
 75a:	f9 2f       	mov	r31, r25
 75c:	96 e9       	ldi	r25, 0x96	; 150
 75e:	bb 27       	eor	r27, r27
 760:	93 95       	inc	r25
 762:	f6 95       	lsr	r31
 764:	87 95       	ror	r24
 766:	77 95       	ror	r23
 768:	67 95       	ror	r22
 76a:	b7 95       	ror	r27
 76c:	f1 11       	cpse	r31, r1
 76e:	f8 cf       	rjmp	.-16     	; 0x760 <__floatsisf+0x1c>
 770:	fa f4       	brpl	.+62     	; 0x7b0 <__floatsisf+0x6c>
 772:	bb 0f       	add	r27, r27
 774:	11 f4       	brne	.+4      	; 0x77a <__floatsisf+0x36>
 776:	60 ff       	sbrs	r22, 0
 778:	1b c0       	rjmp	.+54     	; 0x7b0 <__floatsisf+0x6c>
 77a:	6f 5f       	subi	r22, 0xFF	; 255
 77c:	7f 4f       	sbci	r23, 0xFF	; 255
 77e:	8f 4f       	sbci	r24, 0xFF	; 255
 780:	9f 4f       	sbci	r25, 0xFF	; 255
 782:	16 c0       	rjmp	.+44     	; 0x7b0 <__floatsisf+0x6c>
 784:	88 23       	and	r24, r24
 786:	11 f0       	breq	.+4      	; 0x78c <__floatsisf+0x48>
 788:	96 e9       	ldi	r25, 0x96	; 150
 78a:	11 c0       	rjmp	.+34     	; 0x7ae <__floatsisf+0x6a>
 78c:	77 23       	and	r23, r23
 78e:	21 f0       	breq	.+8      	; 0x798 <__floatsisf+0x54>
 790:	9e e8       	ldi	r25, 0x8E	; 142
 792:	87 2f       	mov	r24, r23
 794:	76 2f       	mov	r23, r22
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <__floatsisf+0x5e>
 798:	66 23       	and	r22, r22
 79a:	71 f0       	breq	.+28     	; 0x7b8 <__floatsisf+0x74>
 79c:	96 e8       	ldi	r25, 0x86	; 134
 79e:	86 2f       	mov	r24, r22
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	2a f0       	brmi	.+10     	; 0x7b0 <__floatsisf+0x6c>
 7a6:	9a 95       	dec	r25
 7a8:	66 0f       	add	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	da f7       	brpl	.-10     	; 0x7a6 <__floatsisf+0x62>
 7b0:	88 0f       	add	r24, r24
 7b2:	96 95       	lsr	r25
 7b4:	87 95       	ror	r24
 7b6:	97 f9       	bld	r25, 7
 7b8:	08 95       	ret

000007ba <__fp_inf>:
 7ba:	97 f9       	bld	r25, 7
 7bc:	9f 67       	ori	r25, 0x7F	; 127
 7be:	80 e8       	ldi	r24, 0x80	; 128
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	60 e0       	ldi	r22, 0x00	; 0
 7c4:	08 95       	ret

000007c6 <__fp_nan>:
 7c6:	9f ef       	ldi	r25, 0xFF	; 255
 7c8:	80 ec       	ldi	r24, 0xC0	; 192
 7ca:	08 95       	ret

000007cc <__fp_pscA>:
 7cc:	00 24       	eor	r0, r0
 7ce:	0a 94       	dec	r0
 7d0:	16 16       	cp	r1, r22
 7d2:	17 06       	cpc	r1, r23
 7d4:	18 06       	cpc	r1, r24
 7d6:	09 06       	cpc	r0, r25
 7d8:	08 95       	ret

000007da <__fp_pscB>:
 7da:	00 24       	eor	r0, r0
 7dc:	0a 94       	dec	r0
 7de:	12 16       	cp	r1, r18
 7e0:	13 06       	cpc	r1, r19
 7e2:	14 06       	cpc	r1, r20
 7e4:	05 06       	cpc	r0, r21
 7e6:	08 95       	ret

000007e8 <__fp_round>:
 7e8:	09 2e       	mov	r0, r25
 7ea:	03 94       	inc	r0
 7ec:	00 0c       	add	r0, r0
 7ee:	11 f4       	brne	.+4      	; 0x7f4 <__fp_round+0xc>
 7f0:	88 23       	and	r24, r24
 7f2:	52 f0       	brmi	.+20     	; 0x808 <__fp_round+0x20>
 7f4:	bb 0f       	add	r27, r27
 7f6:	40 f4       	brcc	.+16     	; 0x808 <__fp_round+0x20>
 7f8:	bf 2b       	or	r27, r31
 7fa:	11 f4       	brne	.+4      	; 0x800 <__fp_round+0x18>
 7fc:	60 ff       	sbrs	r22, 0
 7fe:	04 c0       	rjmp	.+8      	; 0x808 <__fp_round+0x20>
 800:	6f 5f       	subi	r22, 0xFF	; 255
 802:	7f 4f       	sbci	r23, 0xFF	; 255
 804:	8f 4f       	sbci	r24, 0xFF	; 255
 806:	9f 4f       	sbci	r25, 0xFF	; 255
 808:	08 95       	ret

0000080a <__fp_split3>:
 80a:	57 fd       	sbrc	r21, 7
 80c:	90 58       	subi	r25, 0x80	; 128
 80e:	44 0f       	add	r20, r20
 810:	55 1f       	adc	r21, r21
 812:	59 f0       	breq	.+22     	; 0x82a <__fp_splitA+0x10>
 814:	5f 3f       	cpi	r21, 0xFF	; 255
 816:	71 f0       	breq	.+28     	; 0x834 <__fp_splitA+0x1a>
 818:	47 95       	ror	r20

0000081a <__fp_splitA>:
 81a:	88 0f       	add	r24, r24
 81c:	97 fb       	bst	r25, 7
 81e:	99 1f       	adc	r25, r25
 820:	61 f0       	breq	.+24     	; 0x83a <__fp_splitA+0x20>
 822:	9f 3f       	cpi	r25, 0xFF	; 255
 824:	79 f0       	breq	.+30     	; 0x844 <__fp_splitA+0x2a>
 826:	87 95       	ror	r24
 828:	08 95       	ret
 82a:	12 16       	cp	r1, r18
 82c:	13 06       	cpc	r1, r19
 82e:	14 06       	cpc	r1, r20
 830:	55 1f       	adc	r21, r21
 832:	f2 cf       	rjmp	.-28     	; 0x818 <__fp_split3+0xe>
 834:	46 95       	lsr	r20
 836:	f1 df       	rcall	.-30     	; 0x81a <__fp_splitA>
 838:	08 c0       	rjmp	.+16     	; 0x84a <__fp_splitA+0x30>
 83a:	16 16       	cp	r1, r22
 83c:	17 06       	cpc	r1, r23
 83e:	18 06       	cpc	r1, r24
 840:	99 1f       	adc	r25, r25
 842:	f1 cf       	rjmp	.-30     	; 0x826 <__fp_splitA+0xc>
 844:	86 95       	lsr	r24
 846:	71 05       	cpc	r23, r1
 848:	61 05       	cpc	r22, r1
 84a:	08 94       	sec
 84c:	08 95       	ret

0000084e <__fp_zero>:
 84e:	e8 94       	clt

00000850 <__fp_szero>:
 850:	bb 27       	eor	r27, r27
 852:	66 27       	eor	r22, r22
 854:	77 27       	eor	r23, r23
 856:	cb 01       	movw	r24, r22
 858:	97 f9       	bld	r25, 7
 85a:	08 95       	ret

0000085c <__itoa_ncheck>:
 85c:	bb 27       	eor	r27, r27
 85e:	4a 30       	cpi	r20, 0x0A	; 10
 860:	31 f4       	brne	.+12     	; 0x86e <__stack+0xf>
 862:	99 23       	and	r25, r25
 864:	22 f4       	brpl	.+8      	; 0x86e <__stack+0xf>
 866:	bd e2       	ldi	r27, 0x2D	; 45
 868:	90 95       	com	r25
 86a:	81 95       	neg	r24
 86c:	9f 4f       	sbci	r25, 0xFF	; 255
 86e:	0c 94 3a 04 	jmp	0x874	; 0x874 <__utoa_common>

00000872 <__utoa_ncheck>:
 872:	bb 27       	eor	r27, r27

00000874 <__utoa_common>:
 874:	fb 01       	movw	r30, r22
 876:	55 27       	eor	r21, r21
 878:	aa 27       	eor	r26, r26
 87a:	88 0f       	add	r24, r24
 87c:	99 1f       	adc	r25, r25
 87e:	aa 1f       	adc	r26, r26
 880:	a4 17       	cp	r26, r20
 882:	10 f0       	brcs	.+4      	; 0x888 <__utoa_common+0x14>
 884:	a4 1b       	sub	r26, r20
 886:	83 95       	inc	r24
 888:	50 51       	subi	r21, 0x10	; 16
 88a:	b9 f7       	brne	.-18     	; 0x87a <__utoa_common+0x6>
 88c:	a0 5d       	subi	r26, 0xD0	; 208
 88e:	aa 33       	cpi	r26, 0x3A	; 58
 890:	08 f0       	brcs	.+2      	; 0x894 <__utoa_common+0x20>
 892:	a9 5d       	subi	r26, 0xD9	; 217
 894:	a1 93       	st	Z+, r26
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	79 f7       	brne	.-34     	; 0x878 <__utoa_common+0x4>
 89a:	b1 11       	cpse	r27, r1
 89c:	b1 93       	st	Z+, r27
 89e:	11 92       	st	Z+, r1
 8a0:	cb 01       	movw	r24, r22
 8a2:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <strrev>

000008a6 <strrev>:
 8a6:	dc 01       	movw	r26, r24
 8a8:	fc 01       	movw	r30, r24
 8aa:	67 2f       	mov	r22, r23
 8ac:	71 91       	ld	r23, Z+
 8ae:	77 23       	and	r23, r23
 8b0:	e1 f7       	brne	.-8      	; 0x8aa <strrev+0x4>
 8b2:	32 97       	sbiw	r30, 0x02	; 2
 8b4:	04 c0       	rjmp	.+8      	; 0x8be <strrev+0x18>
 8b6:	7c 91       	ld	r23, X
 8b8:	6d 93       	st	X+, r22
 8ba:	70 83       	st	Z, r23
 8bc:	62 91       	ld	r22, -Z
 8be:	ae 17       	cp	r26, r30
 8c0:	bf 07       	cpc	r27, r31
 8c2:	c8 f3       	brcs	.-14     	; 0x8b6 <strrev+0x10>
 8c4:	08 95       	ret

000008c6 <_exit>:
 8c6:	f8 94       	cli

000008c8 <__stop_program>:
 8c8:	ff cf       	rjmp	.-2      	; 0x8c8 <__stop_program>
